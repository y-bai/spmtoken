#!/usr/bin/env python
# -*-coding:utf-8 -*-
"""
@File    :      __init__.py
@Time    :      2024/02/27 09:52:02
@Author  :      Yong Bai 
@Contact :      baiyong at genomics.cn
@License :   	(C)Copyright 2023-2024, Yong Bai

                Licensed under the Apache License, Version 2.0 (the "License");
                you may not use this file except in compliance with the License.
                You may obtain a copy of the License at

                    http://www.apache.org/licenses/LICENSE-2.0

                Unless required by applicable law or agreed to in writing, software
                distributed under the License is distributed on an "AS IS" BASIS,
                WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                See the License for the specific language governing permissions and
                limitations under the License.
                
@Desc    :      None

"""

from typing import Union
from datasets import (
    DatasetDict,
    Dataset,
    IterableDatasetDict,
    IterableDataset,
)

from ._bpe_tokenizer import BioSeqBaseBPETokenizer, BioSeqBPETokenizer
from ._bpe_tokenizer_fast import BioSeqBPETokenizerFast
from ._unigram_tokenizer import BioSeqBaseUnigramTokenizer, BioSeqUnigramTokenizer
from ._unigram_tokenizer_fast import BioSeqUnigramTokenizerFast

from ._tokenizer_map import BioSeqTokenizerMap

def get_corpus_len(dataset: Union[Dataset, DatasetDict]):
    """get the number of sequence instance in the corpus dataset

    Parameters
    ----------
    dataset : Union[Dataset, DatasetDict]
        dataset generated by `load_dataset()`

    Returns
    -------
    int
        the number of sequence instance in the dataset
    """

    if isinstance(dataset, Dataset):
        return len(dataset)
    
    _len = 0    
    for i_key in dataset:
        _len += len(dataset[i_key])
    return _len

def get_corpus_iterator(dataset: Union[Dataset, DatasetDict], 
                   batch_size: int = 1000):
    
    """get corpus of DNA sequence 

    Parameters
    ----------
    dataset : Union[Dataset, DatasetDict]
        dataset generated by `load_dataset()`
    batch_size : int, optional
        batch size, by default 1000
    """

    if isinstance(dataset, Dataset):
        for i in range(0, len(dataset), batch_size):
            yield dataset[i : i + batch_size]['sequence']
    elif isinstance(dataset, DatasetDict):
        for i_key in dataset:
            _data = dataset[i_key]

            for i in range(0, len(_data), batch_size):
                yield _data[i : i + batch_size]['sequence']
